(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2396],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return p},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(r),f=a,h=m["".concat(s,".").concat(f)]||m[f]||u[f]||i;return r?n.createElement(h,o(o({ref:t},p),{},{components:r})):n.createElement(h,o({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6491:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var n=r(2122),a=r(9756),i=(r(7294),r(3905)),o=["components"],l={sidebar_position:3},s="Quick Start",c={unversionedId:"tutorial-basics/Quick-Start",id:"tutorial-basics/Quick-Start",isDocsHomePage:!1,title:"Quick Start",description:"The following is a simple example which defines a schema with a single hello string-type field and a Resolve method which returns the string world. A GraphQL query is performed against this schema with the resulting output printed in JSON format.",source:"@site/docs/tutorial-basics/Quick-Start.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/Quick-Start",permalink:"/example-graphql-go/es/docs/next/tutorial-basics/Quick-Start",editUrl:"https://github.com/LuisIzarra/example-graphql-go/edit/main/docs/docs/tutorial-basics/Quick-Start.md",version:"current",lastUpdatedBy:"LuisIzarra",lastUpdatedAt:1626708810,formattedLastUpdatedAt:"19/7/2021",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/example-graphql-go/es/docs/next/tutorial-basics/Installation"},next:{title:"GraphQL API",permalink:"/example-graphql-go/es/docs/next/Examples/graphql-api"}},p=[],u={toc:p};function m(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"quick-start"},"Quick Start"),(0,i.kt)("p",null,"The following is a simple example which defines a schema with a single ",(0,i.kt)("inlineCode",{parentName:"p"},"hello")," string-type field and a ",(0,i.kt)("inlineCode",{parentName:"p"},"Resolve")," method which returns the string ",(0,i.kt)("inlineCode",{parentName:"p"},"world"),". A GraphQL query is performed against this schema with the resulting output printed in JSON format."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="main.go"',title:'"main.go"'},'    package main\n\n    import (\n      "encoding/json"\n      "fmt"\n      "log"\n\n      "github.com/graphql-go/graphql"\n    )\n\n    func main() {\n      // Schema\n      fields := graphql.Fields{\n        "hello": &graphql.Field{\n          Type: graphql.String,\n          Resolve: func(p graphql.ResolveParams) (interface{}, error) {\n            return "world", nil\n          },\n        },\n      }\n      rootQuery := graphql.ObjectConfig{Name: "RootQuery", Fields: fields}\n      schemaConfig := graphql.SchemaConfig{Query: graphql.NewObject(rootQuery)}\n      schema, err := graphql.NewSchema(schemaConfig)\n      if err != nil {\n        log.Fatalf("failed to create new schema, error: %v", err)\n      }\n\n      // Query\n      query := `\n        {\n          hello\n        }\n      `\n      params := graphql.Params{Schema: schema, RequestString: query}\n      r := graphql.Do(params)\n      if len(r.Errors) > 0 {\n        log.Fatalf("failed to execute graphql operation, errors: %+v", r.Errors)\n      }\n      rJSON, _ := json.Marshal(r)\n      fmt.Printf("%s \\n", rJSON) // {"data":{"hello":"world"}}\n    }\n')))}m.isMDXComponent=!0}}]);