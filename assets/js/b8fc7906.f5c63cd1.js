(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[396],{6491:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var n=t(2122),a=t(9756),i=(t(7294),t(3905)),o=["components"],s={sidebar_position:3},l={unversionedId:"tutorial-basics/Quick-Start",id:"tutorial-basics/Quick-Start",isDocsHomePage:!1,title:"Quick Start",description:"The following is a simple example which defines a schema with a single `hello` string-type field and a `Resolve` method which returns the string `world`. A GraphQL query is performed against this schema with the resulting output printed in JSON format.",source:"@site/docs/tutorial-basics/Quick-Start.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/Quick-Start",permalink:"/example-graphql-go/docs/tutorial-basics/Quick-Start",editUrl:"https://github.com/LuisIzarra/example-graphql-go/docs/tutorial-basics/Quick-Start.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/example-graphql-go/docs/tutorial-basics/Installation"},next:{title:"Running a GraphQL API",permalink:"/example-graphql-go/docs/intro"}},p=[],c={toc:p};function u(e){var r=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The following is a simple example which defines a schema with a single ",(0,i.kt)("inlineCode",{parentName:"p"},"hello")," string-type field and a ",(0,i.kt)("inlineCode",{parentName:"p"},"Resolve")," method which returns the string ",(0,i.kt)("inlineCode",{parentName:"p"},"world"),". A GraphQL query is performed against this schema with the resulting output printed in JSON format."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="main.go"',title:'"main.go"'},'    package main\n\n    import (\n      "encoding/json"\n      "fmt"\n      "log"\n\n      "github.com/graphql-go/graphql"\n    )\n\n    func main() {\n      // Schema\n      fields := graphql.Fields{\n        "hello": &graphql.Field{\n          Type: graphql.String,\n          Resolve: func(p graphql.ResolveParams) (interface{}, error) {\n            return "world", nil\n          },\n        },\n      }\n      rootQuery := graphql.ObjectConfig{Name: "RootQuery", Fields: fields}\n      schemaConfig := graphql.SchemaConfig{Query: graphql.NewObject(rootQuery)}\n      schema, err := graphql.NewSchema(schemaConfig)\n      if err != nil {\n        log.Fatalf("failed to create new schema, error: %v", err)\n      }\n\n      // Query\n      query := `\n        {\n          hello\n        }\n      `\n      params := graphql.Params{Schema: schema, RequestString: query}\n      r := graphql.Do(params)\n      if len(r.Errors) > 0 {\n        log.Fatalf("failed to execute graphql operation, errors: %+v", r.Errors)\n      }\n      rJSON, _ := json.Marshal(r)\n      fmt.Printf("%s \\n", rJSON) // {"data":{"hello":"world"}}\n    }\n')))}u.isMDXComponent=!0}}]);